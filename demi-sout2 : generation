#include <stdio.h>
#include <windows.h>
#include "biblio_fonction.h"

/* Pour corriger le bound 10 :
 * enlever les <= ligne/colonne
 * mettre ligne et colonne ? nombre demand?
 */

//VARIABLES
char Tableau[ligne][colonne];
char S= 'S';
char oiseau = 'V';
//coordonn?es initiales
int Xi = 4,Yi = 8;

// affichage du tableau
void affichage_tableau()
{
    system("cls");
    for(int l = 0 ; l <= ligne-1 ;l++) {
        for( int c = 0 ; c <= colonne-1 ; c++) {
            printf(" %c", Tableau[l][c]) ;
        }
        printf("\n");
    }
}
int generation_map_test(int niv)
{
    //selectionneur de niveau
    switch (niv)
    {
        case 1 :
        {
            //g?n?ration bordure
            generator_bordure();
            //generation blocs
            generator_niv(1);
            //initialisation de snoopy
            Xi = 4,Yi =8 ;
            Tableau[Xi][Yi] = S;
            break;
        }
        case 2 :
        {
            //g?n?ration bordure
            generator_bordure();
            //g?n?ration des blocs
            //initialisation de snoopy
            Xi = 4,Yi =8 ;
            Tableau[Xi][Yi] = S;
            break;
        }
        case 3 :
        {
            //g?n?ration bordure
            generator_bordure();
            //g?n?ration des blocs
            //initialisation de snoopy
            Xi = 4,Yi =8 ;
            Tableau[Xi][Yi] = S;
            break;
        }
    }
    //affichage
    affichage_tableau();
}
void generator_niv(int niv)
{
    switch (niv) {
        case 1 :
        {
            //blocs cassables
            Tableau[8][2] = bloc_cassable;
            Tableau[6][5] = bloc_cassable;
            Tableau[3][14] = bloc_cassable;
            //piege
            Tableau[7][12] = piege;
            //blocs movibles
            Tableau[5][2] = bloc_movible;
            Tableau[4][10] = bloc_movible;
            Tableau[6][16] = bloc_movible;
            //blocs fixes par lignes
            for (int i = 1;i<3;i++){Tableau[2][i] = bloc_amovible;}

            for (int i = 6;i<8;i++){Tableau[i][1] = bloc_amovible;}
            Tableau[6][2] = bloc_amovible;
            for (int i = 6;i<8;i++){Tableau[i][3] = bloc_amovible;}

            for (int i = 4;i<8;i++){Tableau[1][i] = bloc_amovible;}
            for (int i = 4;i<6;i++){Tableau[2][i] = bloc_amovible;}
            Tableau[3][4] = bloc_amovible;
            for (int i = 3;i<6;i++){Tableau[4][i] = bloc_amovible;}
            Tableau[5][5] = bloc_amovible;
            for (int i = 7;i<9;i++){Tableau[i][5] = bloc_amovible;}

            for (int i = 7;i<9;i++){Tableau[3][i] = bloc_amovible;}
            Tableau[4][7] = bloc_amovible;

            for (int i = 8;i<10;i++){Tableau[6][i] = bloc_amovible;}
            for (int i = 7;i<9;i++){Tableau[7][i] = bloc_amovible;}
            for (int i = 10;i<14;i++){Tableau[8][i] = bloc_amovible;}

            for (int i = 11;i<14;i++){Tableau[6][i] = bloc_amovible;}
            Tableau[5][11] = bloc_amovible;

            for (int i = 9;i<14;i++){Tableau[1][i] = bloc_amovible;}
            for (int i = 10;i<14;i++){Tableau[2][i] = bloc_amovible;}
            for (int i = 11;i<14;i++){Tableau[3][i] = bloc_amovible;}
            Tableau[4][13] = bloc_amovible;

            Tableau[1][17] = bloc_amovible;
            Tableau[3][15] = bloc_amovible;
            Tableau[5][15] = bloc_amovible;

            for (int i = 7;i<9;i++){Tableau[i][15] = bloc_amovible;}

            for (int i = 15;i<19;i++){Tableau[3][i] = bloc_amovible;}
            for (int i = 17;i<19;i++){Tableau[4][i] = bloc_amovible;}
            for (int i = 17;i<19;i++){Tableau[5][i] = bloc_amovible;}
            Tableau[6][18] = bloc_amovible;
            for (int i = 17;i<19;i++){Tableau[7][i] = bloc_amovible;}
            break;
        }
    }
}
void generator_bordure()
{
    //Initialisation Tableau Colonne et ligne
    for(int l = 0 ; l <= ligne-1 ;l++){
        for(int c = 0 ; c <= colonne-1 ;c++){
            if (l==0 || l==ligne-1)
                Tableau[l][c] = bordureHorizontal;
            else if (c==0 || c==colonne-1)
                Tableau[l][c] = bordureVertical;
            else if (c==1 && l == 1)
                Tableau[l][c] = oiseau;
            else if (c==1 && l == ligne - 2)
                Tableau[l][c] = oiseau;
            else if (c==colonne - 2 && l == 1)
                Tableau[l][c] = oiseau;
            else if (c== colonne - 2 && l == ligne - 2)
                Tableau[l][c] = oiseau;
            else
                Tableau[l][c] = vide;
        }
    }
}
