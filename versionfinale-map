#include <stdio.h>
#include <windows.h>
#include "biblio_fonction.h"

char Tableau[LIGNE][COLONNE];
//coordonnées initiales
int Xi = 4,Yi = 8;
char pop_depop = POP_DEPOP;

int generation_map_test(int niv, int partie)
{
    if (partie == 1)
    {
        rAm(2);
    }
    else if (partie == 2)
    {
        menu_charge();
    }
    else
    {
        //selectionneur de niveau
        switch (niv)
        {
            case 1 :
            {

                //génération bordure
                generator_bordure();
                //generation blocs
                generator_niv(1);
                //initialisation pero
                Tableau[5][5] = TELEPORTEUR2;
                Tableau[7][7] = TELEPORTEUR1;
                Tableau[12][2] = TRZ;
                Tableau[13][2] = TRZ;
                Xi = 4,Yi =8 ;
                Tableau[Xi][Yi] = S;
                break;
            }
            case 2 :
            {
                //génération bordure
                generator_bordure();
                //génération des blocs
                generator_niv(2);
                //initialisation pero
                Xi = 4,Yi =8 ;
                Tableau[Xi][Yi] = S;
                break;
            }
            case 3 :
            {
                //génération bordure
                generator_bordure();
                //génération des blocs
                generator_niv(3);
                //initialisation pero
                Xi = 5,Yi =10 ;
                Tableau[Xi][Yi] = S;
                break;
            }
            case 4 :
            {
                //génération bordure
                generator_bordure();
                //génération des blocs
                //initialisation pero
                Xi = 4,Yi =8 ;
                Tableau[Xi][Yi] = S;
                break;
            }
        }
    }
    //affichage
    affichage_tableau();
}

// affichage du tableau
void affichage_tableau()
{
    for(short l = 0 ; l <= LIGNE-1 ;l++) {
        for( short c = 0 ; c <= COLONNE-1 ; c++) {
            gotoligcol(l,c*2);
            printf(" %c", Tableau[l][c]) ;
        }
        printf("\n");
    }
}

void generator_bordure()
{
    //Initialisation Tableau Colonne et ligne
    for(int l = 0 ; l <= LIGNE-1 ;l++){
        for(int c = 0 ; c <= COLONNE-1 ;c++){
            if (l==0 || l==LIGNE-1)
                Tableau[l][c] = BORDUREHORIZONTALE;
            else if (c==0 || c==COLONNE-1)
                Tableau[l][c] = BORDUREVERTICALE;
            else if (c==1 && l == 1)
                Tableau[l][c] = OISEAU;
            else if (c==1 && l == LIGNE - 2)
                Tableau[l][c] = OISEAU;
            else if (c==COLONNE - 2 && l == 1)
                Tableau[l][c] = OISEAU;
            else if (c== COLONNE - 2 && l == LIGNE - 2)
                Tableau[l][c] = OISEAU;
            else
                Tableau[l][c] = VIDE;
        }
    }
}
void generator_niv(int niv)
{
    switch (niv) {
        case 1 :
        {
            //blocs cassables
            Tableau[8][2] = BLOC_CASSABLE;
            Tableau[6][5] = BLOC_CASSABLE;
            Tableau[3][14] = BLOC_CASSABLE;
            //piege
            Tableau[7][12] = PIEGE;
            //blocs movibles
            Tableau[5][2] = BLOC_MOVIBLE;
            Tableau[4][10] = BLOC_MOVIBLE;
            Tableau[6][16] = BLOC_MOVIBLE;
            //blocs fixes par lignes
            for (int i = 1;i<3;i++){Tableau[2][i] = BLOC_AMOVIBLE;}

            for (int i = 6;i<8;i++){Tableau[i][1] = BLOC_AMOVIBLE;}
            Tableau[6][2] = BLOC_AMOVIBLE;
            for (int i = 6;i<8;i++){Tableau[i][3] = BLOC_AMOVIBLE;}

            for (int i = 4;i<8;i++){Tableau[1][i] = BLOC_AMOVIBLE;}
            for (int i = 4;i<6;i++){Tableau[2][i] = BLOC_AMOVIBLE;}
            Tableau[3][4] = BLOC_AMOVIBLE;
            for (int i = 3;i<6;i++){Tableau[4][i] = BLOC_AMOVIBLE;}
            Tableau[5][5] = BLOC_AMOVIBLE;
            for (int i = 7;i<9;i++){Tableau[i][5] = BLOC_AMOVIBLE;}

            for (int i = 7;i<9;i++){Tableau[3][i] = BLOC_AMOVIBLE;}
            Tableau[4][7] = BLOC_AMOVIBLE;

            for (int i = 8;i<10;i++){Tableau[6][i] = BLOC_AMOVIBLE;}
            for (int i = 7;i<9;i++){Tableau[7][i] = BLOC_AMOVIBLE;}
            for (int i = 10;i<14;i++){Tableau[8][i] = BLOC_AMOVIBLE;}

            for (int i = 11;i<14;i++){Tableau[6][i] = BLOC_AMOVIBLE;}
            Tableau[5][11] = BLOC_AMOVIBLE;

            for (int i = 9;i<14;i++){Tableau[1][i] = BLOC_AMOVIBLE;}
            for (int i = 10;i<14;i++){Tableau[2][i] = BLOC_AMOVIBLE;}
            for (int i = 11;i<14;i++){Tableau[3][i] = BLOC_AMOVIBLE;}
            Tableau[4][13] = BLOC_AMOVIBLE;

            Tableau[1][17] = BLOC_AMOVIBLE;
            Tableau[3][15] = BLOC_AMOVIBLE;
            Tableau[5][15] = BLOC_AMOVIBLE;

            for (int i = 7;i<9;i++){Tableau[i][15] = BLOC_AMOVIBLE;}

            for (int i = 15;i<19;i++){Tableau[3][i] = BLOC_AMOVIBLE;}
            for (int i = 17;i<19;i++){Tableau[4][i] = BLOC_AMOVIBLE;}
            for (int i = 17;i<19;i++){Tableau[5][i] = BLOC_AMOVIBLE;}
            Tableau[6][18] = BLOC_AMOVIBLE;
            for (int i = 17;i<19;i++){Tableau[7][i] = BLOC_AMOVIBLE;}
            break;
        }
        case 2 :
        {
            //bloc cassables
            Tableau[2][9] = BLOC_CASSABLE;
            Tableau[5][1] = BLOC_CASSABLE;
            //piege
            Tableau[2][14] = PIEGE;
            Tableau[6][1] = PIEGE;
            //blocs movibles
            Tableau[3][13] = BLOC_MOVIBLE;
            Tableau[4][3] = BLOC_MOVIBLE;
            Tableau[1][16] = SURPRISE;

            //blocs fixes par lignes
            for(int i = 5 ; i < 8 ; i++){Tableau[1][i] = BLOC_AMOVIBLE;}
            for(int i = 2 ; i < 4 ; i++){Tableau[2][i] = BLOC_AMOVIBLE;}
            for(int i = 10 ; i < 13 ; i++){Tableau[2][i] = BLOC_AMOVIBLE;}
            for(int i = 15 ; i < 19; i++){Tableau[2][i] = BLOC_AMOVIBLE;}
            for(int i = 5 ; i < 9 ; i++){Tableau[3][i] = BLOC_AMOVIBLE;}
            for(int i = 15 ; i < 19 ; i++){Tableau[3][i] = BLOC_AMOVIBLE;}
            for(int i = 14 ; i < 18 ; i++){Tableau[5][i] = BLOC_AMOVIBLE;}
            for(int i = 11  ; i < 13 ; i++){Tableau[6][i] = BLOC_AMOVIBLE;}
            for(int i = 9 ; i < 16; i++){Tableau[7][i] = BLOC_AMOVIBLE;}
            for(int i = 3 ; i < 5; i++){Tableau[8][i] = BLOC_AMOVIBLE;}
            for(int i = 8 ; i < 17 ; i++){Tableau[8][i] = BLOC_AMOVIBLE;}

            //blocs fixes par colonnes
            for(int i = 5 ; i < 7 ; i++){Tableau[i][2] = BLOC_AMOVIBLE;}
            for(int i = 5 ; i < 7 ; i++){Tableau[i][5] = BLOC_AMOVIBLE;}
            for(int i = 5 ; i < 7 ; i++){Tableau[i][6] = BLOC_AMOVIBLE;}

            Tableau[3][2] = BLOC_AMOVIBLE;
            Tableau[3][10] = BLOC_AMOVIBLE;
            Tableau[4][5] = BLOC_AMOVIBLE;
            Tableau[4][12] = BLOC_AMOVIBLE;
            Tableau[5][10] = BLOC_AMOVIBLE;
            Tableau[6][8] = BLOC_AMOVIBLE;
            Tableau[6][17] = BLOC_AMOVIBLE;
            break;
        }
        case 3 :
        {
            //blocs cassables
            Tableau[7][8] = BLOC_CASSABLE;
            Tableau[1][9] = BLOC_CASSABLE;
            Tableau[3][6] = BLOC_CASSABLE;
            Tableau[2][16] = BLOC_CASSABLE;
            Tableau[2][17] = BLOC_CASSABLE;
            //piege
            Tableau[4][2] = PIEGE;
            Tableau[7][1] = PIEGE;
            Tableau[1][13] = PIEGE;
            Tableau[6][16] = PIEGE;
            Tableau[8][16] = PIEGE;
            Tableau[8][9] = PIEGE;
            Tableau[6][12] = PIEGE;
            //blocs movibles
            Tableau[3][7] = BLOC_MOVIBLE;
            Tableau[4][7] = BLOC_MOVIBLE;
            Tableau[3][9] = BLOC_MOVIBLE;
            Tableau[6][9] = BLOC_MOVIBLE;
            Tableau[6][11] = BLOC_MOVIBLE;
            Tableau[5][11] = BLOC_MOVIBLE;
            Tableau[6][1] = BLOC_MOVIBLE;
            Tableau[7][4] = SURPRISE;

            for (int i = 14;i<17;i++){Tableau[1][i] = TRQ;}
            //blocs fixes par lignes
            for (int i = 3;i<6;i++){Tableau[8][i] = BLOC_AMOVIBLE;}
            for (int i = 2;i<5;i++){Tableau[i][5] = BLOC_AMOVIBLE;}
            for (int i = 13;i<16;i++){Tableau[2][i] = BLOC_AMOVIBLE;}
            for (int i = 11;i<14;i++){Tableau[8][i] = BLOC_AMOVIBLE;}

            for (int i = 3;i<5;i++){Tableau[i][3] = BLOC_AMOVIBLE;}
            for (int i = 2;i<4;i++){Tableau[6][i] = BLOC_AMOVIBLE;}
            for (int i = 6;i<8;i++){Tableau[i][5] = BLOC_AMOVIBLE;}
            for (int i = 5;i<7;i++){Tableau[i][7] = BLOC_AMOVIBLE;}
            for (int i = 11;i<13;i++){Tableau[1][i] = BLOC_AMOVIBLE;}
            for (int i = 3;i<5;i++){Tableau[i][11] = BLOC_AMOVIBLE;}
            for (int i = 4;i<6;i++){Tableau[i][13] = BLOC_AMOVIBLE;}
            for (int i = 3;i<5;i++){Tableau[i][15] = BLOC_AMOVIBLE;}
            for (int i = 7;i<9;i++){Tableau[i][15] = BLOC_AMOVIBLE;}
            for (int i = 17;i<19;i++){Tableau[4][i] = BLOC_AMOVIBLE;}

            Tableau[1][3] = BLOC_AMOVIBLE;
            Tableau[3][2] = BLOC_AMOVIBLE;
            Tableau[3][8] = BLOC_AMOVIBLE;
            Tableau[6][8] = BLOC_AMOVIBLE;
            Tableau[3][10] = BLOC_AMOVIBLE;
            Tableau[6][10] = BLOC_AMOVIBLE;
            Tableau[2][18] = BLOC_AMOVIBLE;
            Tableau[7][16] = BLOC_AMOVIBLE;

            break;

            case 4:

                //blocs fixes
                Tableau[1][10] = BLOC_AMOVIBLE;
            Tableau[1][12] = BLOC_AMOVIBLE;
            Tableau[1][15] = BLOC_AMOVIBLE;
            Tableau[2][13] = BLOC_AMOVIBLE;
            Tableau[4][4] = BLOC_AMOVIBLE;
            Tableau[4][7] = BLOC_AMOVIBLE;
            Tableau[4][10] = BLOC_AMOVIBLE;
            Tableau[4][11] = BLOC_AMOVIBLE;
            Tableau[4][15] = BLOC_AMOVIBLE;
            Tableau[5][3] = BLOC_AMOVIBLE;
            Tableau[5][7] = BLOC_AMOVIBLE;
            Tableau[5][9] = BLOC_AMOVIBLE;
            Tableau[5][13] = BLOC_AMOVIBLE;
            Tableau[5][16] = BLOC_AMOVIBLE;
            Tableau[6][11] = BLOC_AMOVIBLE;
            Tableau[6][15] = BLOC_AMOVIBLE;
            Tableau[7][1] = BLOC_AMOVIBLE;
            Tableau[7][2] = BLOC_AMOVIBLE;
            Tableau[7][3] = BLOC_AMOVIBLE;
            Tableau[7][5] = BLOC_AMOVIBLE;
            Tableau[7][9] = BLOC_AMOVIBLE;
            Tableau[7][11] = BLOC_AMOVIBLE;
            Tableau[7][17] = BLOC_AMOVIBLE;
            Tableau[8][9] = BLOC_AMOVIBLE;
            Tableau[8][13] = BLOC_AMOVIBLE;

            //piege
            Tableau[1][3] = PIEGE;
            Tableau[2][11] = PIEGE;
            Tableau[2][17] = PIEGE;
            Tableau[3][1] = PIEGE;
            Tableau[5][5] = PIEGE;
            Tableau[5][15] = PIEGE;
            Tableau[7][4] = PIEGE;
            Tableau[7][7] = PIEGE;
            Tableau[7][16] = PIEGE;
            Tableau[8][8] = PIEGE;
            Tableau[8][10] = PIEGE;

            //blocs cassables
            Tableau[4][14] = BLOC_CASSABLE;
            Tableau[6][3] = BLOC_CASSABLE;
            Tableau[8][4] = BLOC_CASSABLE;
            Tableau[8][15] = BLOC_CASSABLE;

            Tableau[4][2] = BLOC_MOVIBLE;
            Tableau[6][7] = SURPRISE;
            Tableau[8][16] = SURPRISE;

            //tapis
            Tableau[2][3] = TRZ;
            Tableau[2][11] = TRZ;
            Tableau[2][14] = TRZ;
            Tableau[2][16] = TRZ;
            Tableau[3][3] = TRZ;
            Tableau[3][14] = TRZ;
            Tableau[3][16] = TRZ;
            Tableau[3][17] = TRZ;
            Tableau[4][12] = TRZ;

            Tableau[2][4] = TRQ;
            Tableau[2][5] = TRQ;
            Tableau[2][6] = TRQ;
            Tableau[2][7] = TRQ;
            Tableau[2][8] = TRQ;
            Tableau[2][9] = TRQ;
            Tableau[3][7] = TRQ;
            Tableau[3][8] = TRQ;
            Tableau[3][9] = TRQ;
            Tableau[6][17] = TRQ;

            Tableau[2][1] = TRS;
            Tableau[2][18] = TRS;
            Tableau[3][18] = TRS;
            Tableau[5][8] = TRS;
            Tableau[6][8] = TRS;
            Tableau[6][10] = TRS;
            Tableau[6][12] = TRS;
            Tableau[7][8] = TRS;
            Tableau[7][12] = TRS;

            Tableau[1][16] = TRD;
            Tableau[1][17] = TRD;
            Tableau[5][4] = TRD;
            Tableau[7][15] = TRD;
            Tableau[8][7] = TRD;
        }
    }
}

void bloc_depop(int j)
{
    if (j == 1)
    {
        pop_depop = POP_DEPOP;
    }
    else if (j == 0)
    {
        pop_depop = VIDE;
    }
    Tableau[1][2] = pop_depop;
    Tableau[3][2] = pop_depop;
    Tableau[6][6] = pop_depop;
    affichage_tableau();
}
