#include <stdio.h>
#include "biblio_fonction.h"

/* Pour corriger le bound 10 :
 * enlever les <= ligne/colonne
 * mettre ligne et colonne à nombre demandé
 */

//VARIABLES
extern char Tableau[ligne][colonne];
//valeur de snoopy
extern char S;
extern char oiseau;
//coordonnées initiales
extern int Xi,Yi;
//variables
extern char touche;
char stockeur = ' ';
int compteur_vie = 4;
extern int compteur_oiseau;
extern int NIV;
//initialisation des différrents blocs
extern char bordureHorizontal,bordureVertical;
extern char bordure;
extern char bloc_amovible,bloc_movible,bloc_cassable,piege;
extern char trz,trq,trs,trd;

int deplacement(int* pXm, int* pYm,int* pXr, int* pYr)
{
    //effacement de la position antèrieur
    Tableau[Xi][Yi] = stockeur;
    //stocke la valeur initiale de la case
    stockeur = Tableau[*pXm][*pYm];
    //SI TERRE MODIF MOUV
    //si le bloc rencontré est un tapis roulant
    if(stockeur == trz||stockeur == trq||stockeur == trs||stockeur == trd)
    {
        /*//déplacement
        Tableau[*pXm][*pYm] = S;
        //incrémentation pour la valeur initale suivante
        affichage_tableau();
        //déplacement forcé
        Tableau[*pXm][*pYm] = stockeur;
        Tableau[*pXr][*pYr] = S;
        //incrémentation pour la valeur initale suivante
        Xi = *pXr, Yi = *pYr;
        //déplacement
        Tableau[*pXr][*pYr] = S;
        affichage_tableau();*/
    }
    //SI MOUV MODIF TERRE
    else
    {
        //si le bloc rencontré est movible
        if (stockeur == bloc_movible)
        {
            //déplacement du bloc
            Tableau[*pXr][*pYr] = bloc_amovible;
            //modification du stockeur
            stockeur = ' ';
        }
        if (stockeur == oiseau)
        {
            compteur_oiseau--;
            printf("%d",compteur_oiseau);
            if (compteur_oiseau == 0)
            {
                NIV++;
                //modification du stockeur
                stockeur = ' ';
                jeu(NIV,1);
            }
        }
        if (stockeur == piege)
        {
            compteur_vie = 0;
        //modification du stockeur
        stockeur = ' ';
            jeu(0,-1);
        }
        //déplacement
        Tableau[*pXm][*pYm] = S;
        //incrémentation pour la valeur initale suivante
        Xi = *pXm, Yi = *pYm;
    }
    //affichage de la modification
    affichage_tableau();
    return compteur_vie;
}
//programme d'édition des changements
int mouvement(int Xm, int Ym, int Xr, int Yr)
{
//vérifiaction de la possibilité d'execution du mouvement en cas de bordure ou de bloc fixe
    if(Tableau[Xm][Ym] == bloc_amovible||Tableau[Xm][Ym] == bordureVertical||Tableau[Xm][Ym] == bordureHorizontal||Tableau[Xm][Ym] == bloc_cassable)
    {
        affichage_tableau();
    }
    //vérification en cas de bloc movible
    else if (Tableau[Xm][Ym] == bloc_movible)
    {
        if(Tableau[Xr][Yr] == bloc_amovible||Tableau[Xr][Yr] == bordureVertical||Tableau[Xr][Yr] == bordureHorizontal||Tableau[Xr][Yr] == bloc_cassable||Tableau[Xr][Yr] == bloc_movible)
        {
            affichage_tableau();
        }
        else
        {
            deplacement(&Xm,&Ym,&Xr,&Yr);
        }
    }
    //vérification du bloc tapis roulant
    /*else if (Tableau[Xm][Ym] == trz||Tableau[Xm][Ym] == trq||Tableau[Xm][Ym] == trs||Tableau[Xm][Ym] == trd)
    {
        do
        {
            switch(Tableau[Xm][Ym])
            {
                //Mouv HAUT
                case 'Z' :
                {
                    if(Tableau[Xr][Yr-1] == bloc_amovible||Tableau[Xr][Yr-1] == bordure)
                    {
                        printf("Le mouvement n'est pas possible\n");
                        affichage_tableau();
                    }
                    else
                    {
                        deplacement(&Xr,&Yr,&Xr,&Yr-1);
                    }
                    break;
                }
                    //Mouv GAUCHE
                case 'Q' :
                {
                    if(Tableau[Xr-1][Yr] == bloc_amovible||Tableau[Xr-1][Yr] == bordure)
                    {
                        printf("Le mouvement n'est pas possible\n");
                        affichage_tableau();
                    }
                    else
                    {
                        deplacement(&Xm,&Ym,&Xr-1,&Yr);
                    }
                    break;
                }
                    //Mouv BAS
                case 'S' :
                {
                    if(Tableau[Xr][Yr+1] == bloc_amovible||Tableau[Xr][Yr+1] == bordure)
                    {
                        printf("Le mouvement n'est pas possible\n");
                        affichage_tableau();
                    }
                    else
                    {
                        deplacement(&Xm,&Ym,&Xr,&Yr+1);
                    }
                    break;
                }
                    //Mouv DROITE
                case 'D' :
                {
                    if(Tableau[Xr+1][Yr] == bloc_amovible||Tableau[Xr+1][Yr] == bordure)
                    {
                        printf("Le mouvement n'est pas possible\n");
                        affichage_tableau();
                    }
                    else
                    {
                        deplacement(&Xm,&Ym,&Xr+1,&Yr);
                    }
                    break;
                }
            }
        }while (!(Tableau[Xr][Yr] == trz||Tableau[Xr][Yr] == trq||Tableau[Xr][Yr] == trs||Tableau[Xr][Yr] == trd));
    }*/
        //déplacement permis si aucune autre condition n'est validé
    else
    {
        deplacement(&Xm,&Ym,&Xr,&Yr);
    }
}
